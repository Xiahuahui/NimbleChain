// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: pcc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PccService_InitPCC_FullMethodName = "/PccService/InitPCC"
	PccService_RunPcc_FullMethodName  = "/PccService/RunPcc"
	PccService_RunSpc_FullMethodName  = "/PccService/RunSpc"
	PccService_RunRLJ_FullMethodName  = "/PccService/RunRLJ"
)

// PccServiceClient is the client API for PccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PccServiceClient interface {
	InitPCC(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	RunPcc(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	RunSpc(ctx context.Context, in *RunSpcRequest, opts ...grpc.CallOption) (*RunSpcResponse, error)
	RunRLJ(ctx context.Context, in *RunRLJRequest, opts ...grpc.CallOption) (*RunRLJResponse, error)
}

type pccServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPccServiceClient(cc grpc.ClientConnInterface) PccServiceClient {
	return &pccServiceClient{cc}
}

func (c *pccServiceClient) InitPCC(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, PccService_InitPCC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pccServiceClient) RunPcc(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, PccService_RunPcc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pccServiceClient) RunSpc(ctx context.Context, in *RunSpcRequest, opts ...grpc.CallOption) (*RunSpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunSpcResponse)
	err := c.cc.Invoke(ctx, PccService_RunSpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pccServiceClient) RunRLJ(ctx context.Context, in *RunRLJRequest, opts ...grpc.CallOption) (*RunRLJResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunRLJResponse)
	err := c.cc.Invoke(ctx, PccService_RunRLJ_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PccServiceServer is the server API for PccService service.
// All implementations must embed UnimplementedPccServiceServer
// for forward compatibility.
type PccServiceServer interface {
	InitPCC(context.Context, *InitRequest) (*InitResponse, error)
	RunPcc(context.Context, *RunRequest) (*RunResponse, error)
	RunSpc(context.Context, *RunSpcRequest) (*RunSpcResponse, error)
	RunRLJ(context.Context, *RunRLJRequest) (*RunRLJResponse, error)
	mustEmbedUnimplementedPccServiceServer()
}

// UnimplementedPccServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPccServiceServer struct{}

func (UnimplementedPccServiceServer) InitPCC(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPCC not implemented")
}
func (UnimplementedPccServiceServer) RunPcc(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPcc not implemented")
}
func (UnimplementedPccServiceServer) RunSpc(context.Context, *RunSpcRequest) (*RunSpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSpc not implemented")
}
func (UnimplementedPccServiceServer) RunRLJ(context.Context, *RunRLJRequest) (*RunRLJResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRLJ not implemented")
}
func (UnimplementedPccServiceServer) mustEmbedUnimplementedPccServiceServer() {}
func (UnimplementedPccServiceServer) testEmbeddedByValue()                    {}

// UnsafePccServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PccServiceServer will
// result in compilation errors.
type UnsafePccServiceServer interface {
	mustEmbedUnimplementedPccServiceServer()
}

func RegisterPccServiceServer(s grpc.ServiceRegistrar, srv PccServiceServer) {
	// If the following call pancis, it indicates UnimplementedPccServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PccService_ServiceDesc, srv)
}

func _PccService_InitPCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PccServiceServer).InitPCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PccService_InitPCC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PccServiceServer).InitPCC(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PccService_RunPcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PccServiceServer).RunPcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PccService_RunPcc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PccServiceServer).RunPcc(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PccService_RunSpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PccServiceServer).RunSpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PccService_RunSpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PccServiceServer).RunSpc(ctx, req.(*RunSpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PccService_RunRLJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRLJRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PccServiceServer).RunRLJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PccService_RunRLJ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PccServiceServer).RunRLJ(ctx, req.(*RunRLJRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PccService_ServiceDesc is the grpc.ServiceDesc for PccService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PccService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PccService",
	HandlerType: (*PccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitPCC",
			Handler:    _PccService_InitPCC_Handler,
		},
		{
			MethodName: "RunPcc",
			Handler:    _PccService_RunPcc_Handler,
		},
		{
			MethodName: "RunSpc",
			Handler:    _PccService_RunSpc_Handler,
		},
		{
			MethodName: "RunRLJ",
			Handler:    _PccService_RunRLJ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pcc.proto",
}
