// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.26.1
// source: pcc.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MI             int64   `protobuf:"varint,1,opt,name=m_i,json=mI,proto3" json:"m_i,omitempty"`
	SMI            int64   `protobuf:"varint,2,opt,name=s_m_i,json=sMI,proto3" json:"s_m_i,omitempty"`
	EpochSize      int64   `protobuf:"varint,3,opt,name=epoch_size,json=epochSize,proto3" json:"epoch_size,omitempty"`
	InitTimeout    int64   `protobuf:"varint,4,opt,name=init_timeout,json=initTimeout,proto3" json:"init_timeout,omitempty"`
	IsByz          bool    `protobuf:"varint,5,opt,name=is_byz,json=isByz,proto3" json:"is_byz,omitempty"`
	IsCrash        bool    `protobuf:"varint,8,opt,name=is_crash,json=isCrash,proto3" json:"is_crash,omitempty"`
	ColdStartPhase int64   `protobuf:"varint,6,opt,name=cold_start_phase,json=coldStartPhase,proto3" json:"cold_start_phase,omitempty"`
	DelayTime      float64 `protobuf:"fixed64,9,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	Version        string  `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Method         string  `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	ParaA          float64 `protobuf:"fixed64,11,opt,name=para_a,json=paraA,proto3" json:"para_a,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	mi := &file_pcc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{0}
}

func (x *InitRequest) GetMI() int64 {
	if x != nil {
		return x.MI
	}
	return 0
}

func (x *InitRequest) GetSMI() int64 {
	if x != nil {
		return x.SMI
	}
	return 0
}

func (x *InitRequest) GetEpochSize() int64 {
	if x != nil {
		return x.EpochSize
	}
	return 0
}

func (x *InitRequest) GetInitTimeout() int64 {
	if x != nil {
		return x.InitTimeout
	}
	return 0
}

func (x *InitRequest) GetIsByz() bool {
	if x != nil {
		return x.IsByz
	}
	return false
}

func (x *InitRequest) GetIsCrash() bool {
	if x != nil {
		return x.IsCrash
	}
	return false
}

func (x *InitRequest) GetColdStartPhase() int64 {
	if x != nil {
		return x.ColdStartPhase
	}
	return 0
}

func (x *InitRequest) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *InitRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InitRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *InitRequest) GetParaA() float64 {
	if x != nil {
		return x.ParaA
	}
	return 0
}

type InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MI            int64   `protobuf:"varint,1,opt,name=m_i,json=mI,proto3" json:"m_i,omitempty"`
	MiOfNumber    int64   `protobuf:"varint,2,opt,name=mi_of_number,json=miOfNumber,proto3" json:"mi_of_number,omitempty"`
	EpochSizeList []int64 `protobuf:"varint,3,rep,packed,name=epoch_size_list,json=epochSizeList,proto3" json:"epoch_size_list,omitempty"`
	InitTimeout   int64   `protobuf:"varint,4,opt,name=init_timeout,json=initTimeout,proto3" json:"init_timeout,omitempty"`
	DelayTime     float64 `protobuf:"fixed64,5,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
}

func (x *InitResponse) Reset() {
	*x = InitResponse{}
	mi := &file_pcc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResponse) ProtoMessage() {}

func (x *InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResponse.ProtoReflect.Descriptor instead.
func (*InitResponse) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{1}
}

func (x *InitResponse) GetMI() int64 {
	if x != nil {
		return x.MI
	}
	return 0
}

func (x *InitResponse) GetMiOfNumber() int64 {
	if x != nil {
		return x.MiOfNumber
	}
	return 0
}

func (x *InitResponse) GetEpochSizeList() []int64 {
	if x != nil {
		return x.EpochSizeList
	}
	return nil
}

func (x *InitResponse) GetInitTimeout() int64 {
	if x != nil {
		return x.InitTimeout
	}
	return 0
}

func (x *InitResponse) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewChangeCost int64 `protobuf:"varint,1,opt,name=view_change_cost,json=viewChangeCost,proto3" json:"view_change_cost,omitempty"`
	ThreatCost     int64 `protobuf:"varint,2,opt,name=threat_cost,json=threatCost,proto3" json:"threat_cost,omitempty"`
	Discretionary  int64 `protobuf:"varint,3,opt,name=discretionary,proto3" json:"discretionary,omitempty"`
	Flag           bool  `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *Cost) Reset() {
	*x = Cost{}
	mi := &file_pcc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{2}
}

func (x *Cost) GetViewChangeCost() int64 {
	if x != nil {
		return x.ViewChangeCost
	}
	return 0
}

func (x *Cost) GetThreatCost() int64 {
	if x != nil {
		return x.ThreatCost
	}
	return 0
}

func (x *Cost) GetDiscretionary() int64 {
	if x != nil {
		return x.Discretionary
	}
	return 0
}

func (x *Cost) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type MIData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height             []int64   `protobuf:"varint,1,rep,packed,name=height,proto3" json:"height,omitempty"`
	IsLeader           []bool    `protobuf:"varint,2,rep,packed,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	ProposerList       []int64   `protobuf:"varint,3,rep,packed,name=proposer_list,json=proposerList,proto3" json:"proposer_list,omitempty"`
	IsByzNode          []bool    `protobuf:"varint,4,rep,packed,name=is_byz_node,json=isByzNode,proto3" json:"is_byz_node,omitempty"`
	ActaulTimeoutList  []float64 `protobuf:"fixed64,5,rep,packed,name=actaul_timeout_list,json=actaulTimeoutList,proto3" json:"actaul_timeout_list,omitempty"`
	PredictTimeoutList []float64 `protobuf:"fixed64,6,rep,packed,name=predict_timeout_list,json=predictTimeoutList,proto3" json:"predict_timeout_list,omitempty"`
	ByzTimeoutList     []float64 `protobuf:"fixed64,7,rep,packed,name=byz_timeout_list,json=byzTimeoutList,proto3" json:"byz_timeout_list,omitempty"`
	Round              []int64   `protobuf:"varint,8,rep,packed,name=round,proto3" json:"round,omitempty"`
	CostList           []*Cost   `protobuf:"bytes,9,rep,name=cost_list,json=costList,proto3" json:"cost_list,omitempty"`
	TimeoutValue       int64     `protobuf:"varint,10,opt,name=timeout_value,json=timeoutValue,proto3" json:"timeout_value,omitempty"`
	LatencyList        []float64 `protobuf:"fixed64,11,rep,packed,name=latency_list,json=latencyList,proto3" json:"latency_list,omitempty"`
	TxNumList          []int64   `protobuf:"varint,12,rep,packed,name=tx_num_list,json=txNumList,proto3" json:"tx_num_list,omitempty"`
	Tps                float64   `protobuf:"fixed64,13,opt,name=tps,proto3" json:"tps,omitempty"`
}

func (x *MIData) Reset() {
	*x = MIData{}
	mi := &file_pcc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MIData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MIData) ProtoMessage() {}

func (x *MIData) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MIData.ProtoReflect.Descriptor instead.
func (*MIData) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{3}
}

func (x *MIData) GetHeight() []int64 {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *MIData) GetIsLeader() []bool {
	if x != nil {
		return x.IsLeader
	}
	return nil
}

func (x *MIData) GetProposerList() []int64 {
	if x != nil {
		return x.ProposerList
	}
	return nil
}

func (x *MIData) GetIsByzNode() []bool {
	if x != nil {
		return x.IsByzNode
	}
	return nil
}

func (x *MIData) GetActaulTimeoutList() []float64 {
	if x != nil {
		return x.ActaulTimeoutList
	}
	return nil
}

func (x *MIData) GetPredictTimeoutList() []float64 {
	if x != nil {
		return x.PredictTimeoutList
	}
	return nil
}

func (x *MIData) GetByzTimeoutList() []float64 {
	if x != nil {
		return x.ByzTimeoutList
	}
	return nil
}

func (x *MIData) GetRound() []int64 {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *MIData) GetCostList() []*Cost {
	if x != nil {
		return x.CostList
	}
	return nil
}

func (x *MIData) GetTimeoutValue() int64 {
	if x != nil {
		return x.TimeoutValue
	}
	return 0
}

func (x *MIData) GetLatencyList() []float64 {
	if x != nil {
		return x.LatencyList
	}
	return nil
}

func (x *MIData) GetTxNumList() []int64 {
	if x != nil {
		return x.TxNumList
	}
	return nil
}

func (x *MIData) GetTps() float64 {
	if x != nil {
		return x.Tps
	}
	return 0
}

type HeightData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         int64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	IsLeader       bool    `protobuf:"varint,2,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	Proposer       int64   `protobuf:"varint,3,opt,name=proposer,proto3" json:"proposer,omitempty"`
	IsByzNode      bool    `protobuf:"varint,4,opt,name=is_byz_node,json=isByzNode,proto3" json:"is_byz_node,omitempty"`
	IsCrashNode    bool    `protobuf:"varint,16,opt,name=is_crash_node,json=isCrashNode,proto3" json:"is_crash_node,omitempty"`
	ActaulTimeout  float64 `protobuf:"fixed64,5,opt,name=actaul_timeout,json=actaulTimeout,proto3" json:"actaul_timeout,omitempty"`
	PredictTimeout float64 `protobuf:"fixed64,6,opt,name=predict_timeout,json=predictTimeout,proto3" json:"predict_timeout,omitempty"`
	ByzTimeout     float64 `protobuf:"fixed64,7,opt,name=byz_timeout,json=byzTimeout,proto3" json:"byz_timeout,omitempty"`
	Round          int64   `protobuf:"varint,8,opt,name=round,proto3" json:"round,omitempty"`
	Cost           *Cost   `protobuf:"bytes,9,opt,name=cost,proto3" json:"cost,omitempty"`
	TimeoutValue   int64   `protobuf:"varint,10,opt,name=timeout_value,json=timeoutValue,proto3" json:"timeout_value,omitempty"`
	Latency        float64 `protobuf:"fixed64,11,opt,name=latency,proto3" json:"latency,omitempty"`
	TxNum          int64   `protobuf:"varint,12,opt,name=tx_num,json=txNum,proto3" json:"tx_num,omitempty"`
	Tps            float64 `protobuf:"fixed64,13,opt,name=tps,proto3" json:"tps,omitempty"`
	DelayTime      float64 `protobuf:"fixed64,14,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	Pdt            float64 `protobuf:"fixed64,15,opt,name=pdt,proto3" json:"pdt,omitempty"`
	Min            float64 `protobuf:"fixed64,20,opt,name=min,proto3" json:"min,omitempty"`
	Max            float64 `protobuf:"fixed64,17,opt,name=max,proto3" json:"max,omitempty"`
	Avg            float64 `protobuf:"fixed64,18,opt,name=avg,proto3" json:"avg,omitempty"`
	Std            float64 `protobuf:"fixed64,19,opt,name=std,proto3" json:"std,omitempty"`
	DeliverTime    float64 `protobuf:"fixed64,21,opt,name=deliver_time,json=deliverTime,proto3" json:"deliver_time,omitempty"`
}

func (x *HeightData) Reset() {
	*x = HeightData{}
	mi := &file_pcc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeightData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeightData) ProtoMessage() {}

func (x *HeightData) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeightData.ProtoReflect.Descriptor instead.
func (*HeightData) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{4}
}

func (x *HeightData) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HeightData) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *HeightData) GetProposer() int64 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

func (x *HeightData) GetIsByzNode() bool {
	if x != nil {
		return x.IsByzNode
	}
	return false
}

func (x *HeightData) GetIsCrashNode() bool {
	if x != nil {
		return x.IsCrashNode
	}
	return false
}

func (x *HeightData) GetActaulTimeout() float64 {
	if x != nil {
		return x.ActaulTimeout
	}
	return 0
}

func (x *HeightData) GetPredictTimeout() float64 {
	if x != nil {
		return x.PredictTimeout
	}
	return 0
}

func (x *HeightData) GetByzTimeout() float64 {
	if x != nil {
		return x.ByzTimeout
	}
	return 0
}

func (x *HeightData) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *HeightData) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *HeightData) GetTimeoutValue() int64 {
	if x != nil {
		return x.TimeoutValue
	}
	return 0
}

func (x *HeightData) GetLatency() float64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *HeightData) GetTxNum() int64 {
	if x != nil {
		return x.TxNum
	}
	return 0
}

func (x *HeightData) GetTps() float64 {
	if x != nil {
		return x.Tps
	}
	return 0
}

func (x *HeightData) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *HeightData) GetPdt() float64 {
	if x != nil {
		return x.Pdt
	}
	return 0
}

func (x *HeightData) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *HeightData) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *HeightData) GetAvg() float64 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *HeightData) GetStd() float64 {
	if x != nil {
		return x.Std
	}
	return 0
}

func (x *HeightData) GetDeliverTime() float64 {
	if x != nil {
		return x.DeliverTime
	}
	return 0
}

// 下面这连个需求，
type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MIData []*MIData `protobuf:"bytes,1,rep,name=m_i_data,json=mIData,proto3" json:"m_i_data,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_pcc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{5}
}

func (x *RunRequest) GetMIData() []*MIData {
	if x != nil {
		return x.MIData
	}
	return nil
}

type RunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MI            int64   `protobuf:"varint,1,opt,name=m_i,json=mI,proto3" json:"m_i,omitempty"`
	MiOfNumber    int64   `protobuf:"varint,2,opt,name=mi_of_number,json=miOfNumber,proto3" json:"mi_of_number,omitempty"`
	EpochSizeList []int64 `protobuf:"varint,3,rep,packed,name=epoch_size_list,json=epochSizeList,proto3" json:"epoch_size_list,omitempty"`
	InitTimeout   int64   `protobuf:"varint,4,opt,name=init_timeout,json=initTimeout,proto3" json:"init_timeout,omitempty"`
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_pcc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{6}
}

func (x *RunResponse) GetMI() int64 {
	if x != nil {
		return x.MI
	}
	return 0
}

func (x *RunResponse) GetMiOfNumber() int64 {
	if x != nil {
		return x.MiOfNumber
	}
	return 0
}

func (x *RunResponse) GetEpochSizeList() []int64 {
	if x != nil {
		return x.EpochSizeList
	}
	return nil
}

func (x *RunResponse) GetInitTimeout() int64 {
	if x != nil {
		return x.InitTimeout
	}
	return 0
}

// 这个需求应该和MI的一样的。
type RunSpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MIData *MIData `protobuf:"bytes,1,opt,name=m_i_data,json=mIData,proto3" json:"m_i_data,omitempty"`
}

func (x *RunSpcRequest) Reset() {
	*x = RunSpcRequest{}
	mi := &file_pcc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSpcRequest) ProtoMessage() {}

func (x *RunSpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSpcRequest.ProtoReflect.Descriptor instead.
func (*RunSpcRequest) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{7}
}

func (x *RunSpcRequest) GetMIData() *MIData {
	if x != nil {
		return x.MIData
	}
	return nil
}

// 返回的具体是怎么变 0，1，2，3
type RunSpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RunSpcResponse) Reset() {
	*x = RunSpcResponse{}
	mi := &file_pcc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunSpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSpcResponse) ProtoMessage() {}

func (x *RunSpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSpcResponse.ProtoReflect.Descriptor instead.
func (*RunSpcResponse) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{8}
}

func (x *RunSpcResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type RunRLJRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightData *HeightData `protobuf:"bytes,1,opt,name=height_data,json=heightData,proto3" json:"height_data,omitempty"`
}

func (x *RunRLJRequest) Reset() {
	*x = RunRLJRequest{}
	mi := &file_pcc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRLJRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRLJRequest) ProtoMessage() {}

func (x *RunRLJRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRLJRequest.ProtoReflect.Descriptor instead.
func (*RunRLJRequest) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{9}
}

func (x *RunRLJRequest) GetHeightData() *HeightData {
	if x != nil {
		return x.HeightData
	}
	return nil
}

type RunRLJResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Timeout    float64 `protobuf:"fixed64,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ByzTimeout float64 `protobuf:"fixed64,3,opt,name=byz_timeout,json=byzTimeout,proto3" json:"byz_timeout,omitempty"`
	DelayTime  float64 `protobuf:"fixed64,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
}

func (x *RunRLJResponse) Reset() {
	*x = RunRLJResponse{}
	mi := &file_pcc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRLJResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRLJResponse) ProtoMessage() {}

func (x *RunRLJResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pcc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRLJResponse.ProtoReflect.Descriptor instead.
func (*RunRLJResponse) Descriptor() ([]byte, []int) {
	return file_pcc_proto_rawDescGZIP(), []int{10}
}

func (x *RunRLJResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RunRLJResponse) GetTimeout() float64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RunRLJResponse) GetByzTimeout() float64 {
	if x != nil {
		return x.ByzTimeout
	}
	return 0
}

func (x *RunRLJResponse) GetDelayTime() float64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

var File_pcc_proto protoreflect.FileDescriptor

var file_pcc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x63, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x0b,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x6d,
	0x5f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6d, 0x49, 0x12, 0x12, 0x0a, 0x05,
	0x73, 0x5f, 0x6d, 0x5f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x4d, 0x49,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x79, 0x7a, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x79, 0x7a, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x41, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x6d, 0x5f, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6d, 0x49, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69, 0x5f, 0x6f,
	0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x69, 0x4f, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0xc2, 0x03, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x79,
	0x7a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x42, 0x79, 0x7a, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x61, 0x75,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x11, 0x61, 0x63, 0x74, 0x61, 0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x7a,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x79, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x4e, 0x75,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x74, 0x70, 0x73, 0x22, 0xc7, 0x04, 0x0a, 0x0a, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x79,
	0x7a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x42, 0x79, 0x7a, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x72,
	0x61, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x61, 0x75, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x61, 0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x79, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x62, 0x79, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78,
	0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x74, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x64, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x70, 0x64, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x74, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x74, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x2f, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x08, 0x6d, 0x5f, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x49, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x49, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x6d, 0x5f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x6d, 0x49, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x4f, 0x66, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x32, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x08, 0x6d, 0x5f, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x49, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x49,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x75,
	0x6e, 0x52, 0x4c, 0x4a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7e, 0x0a, 0x0e, 0x52, 0x75, 0x6e,
	0x52, 0x4c, 0x4a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x7a,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x62, 0x79, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xb7, 0x01, 0x0a, 0x0a, 0x50, 0x63,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x43, 0x43, 0x12, 0x0c, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x50, 0x63, 0x63, 0x12, 0x0b, 0x2e, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x75, 0x6e,
	0x53, 0x70, 0x63, 0x12, 0x0e, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x52, 0x4c, 0x4a,
	0x12, 0x0e, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x4c, 0x4a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x4c, 0x4a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pcc_proto_rawDescOnce sync.Once
	file_pcc_proto_rawDescData = file_pcc_proto_rawDesc
)

func file_pcc_proto_rawDescGZIP() []byte {
	file_pcc_proto_rawDescOnce.Do(func() {
		file_pcc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pcc_proto_rawDescData)
	})
	return file_pcc_proto_rawDescData
}

var file_pcc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pcc_proto_goTypes = []any{
	(*InitRequest)(nil),    // 0: InitRequest
	(*InitResponse)(nil),   // 1: InitResponse
	(*Cost)(nil),           // 2: Cost
	(*MIData)(nil),         // 3: MIData
	(*HeightData)(nil),     // 4: HeightData
	(*RunRequest)(nil),     // 5: RunRequest
	(*RunResponse)(nil),    // 6: RunResponse
	(*RunSpcRequest)(nil),  // 7: RunSpcRequest
	(*RunSpcResponse)(nil), // 8: RunSpcResponse
	(*RunRLJRequest)(nil),  // 9: RunRLJRequest
	(*RunRLJResponse)(nil), // 10: RunRLJResponse
}
var file_pcc_proto_depIdxs = []int32{
	2,  // 0: MIData.cost_list:type_name -> Cost
	2,  // 1: HeightData.cost:type_name -> Cost
	3,  // 2: RunRequest.m_i_data:type_name -> MIData
	3,  // 3: RunSpcRequest.m_i_data:type_name -> MIData
	4,  // 4: RunRLJRequest.height_data:type_name -> HeightData
	0,  // 5: PccService.InitPCC:input_type -> InitRequest
	5,  // 6: PccService.RunPcc:input_type -> RunRequest
	7,  // 7: PccService.RunSpc:input_type -> RunSpcRequest
	9,  // 8: PccService.RunRLJ:input_type -> RunRLJRequest
	1,  // 9: PccService.InitPCC:output_type -> InitResponse
	6,  // 10: PccService.RunPcc:output_type -> RunResponse
	8,  // 11: PccService.RunSpc:output_type -> RunSpcResponse
	10, // 12: PccService.RunRLJ:output_type -> RunRLJResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_pcc_proto_init() }
func file_pcc_proto_init() {
	if File_pcc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pcc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pcc_proto_goTypes,
		DependencyIndexes: file_pcc_proto_depIdxs,
		MessageInfos:      file_pcc_proto_msgTypes,
	}.Build()
	File_pcc_proto = out.File
	file_pcc_proto_rawDesc = nil
	file_pcc_proto_goTypes = nil
	file_pcc_proto_depIdxs = nil
}
