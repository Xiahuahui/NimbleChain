# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pcc_pb2 as pcc__pb2


class PccServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitPCC = channel.unary_unary(
                '/PccService/InitPCC',
                request_serializer=pcc__pb2.InitRequest.SerializeToString,
                response_deserializer=pcc__pb2.InitResponse.FromString,
                )
        self.RunPcc = channel.unary_unary(
                '/PccService/RunPcc',
                request_serializer=pcc__pb2.RunRequest.SerializeToString,
                response_deserializer=pcc__pb2.RunResponse.FromString,
                )
        self.RunSpc = channel.unary_unary(
                '/PccService/RunSpc',
                request_serializer=pcc__pb2.RunSpcRequest.SerializeToString,
                response_deserializer=pcc__pb2.RunSpcResponse.FromString,
                )
        self.RunRLJ = channel.unary_unary(
                '/PccService/RunRLJ',
                request_serializer=pcc__pb2.RunRLJRequest.SerializeToString,
                response_deserializer=pcc__pb2.RunRLJResponse.FromString,
                )


class PccServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitPCC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunPcc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunSpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunRLJ(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PccServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitPCC': grpc.unary_unary_rpc_method_handler(
                    servicer.InitPCC,
                    request_deserializer=pcc__pb2.InitRequest.FromString,
                    response_serializer=pcc__pb2.InitResponse.SerializeToString,
            ),
            'RunPcc': grpc.unary_unary_rpc_method_handler(
                    servicer.RunPcc,
                    request_deserializer=pcc__pb2.RunRequest.FromString,
                    response_serializer=pcc__pb2.RunResponse.SerializeToString,
            ),
            'RunSpc': grpc.unary_unary_rpc_method_handler(
                    servicer.RunSpc,
                    request_deserializer=pcc__pb2.RunSpcRequest.FromString,
                    response_serializer=pcc__pb2.RunSpcResponse.SerializeToString,
            ),
            'RunRLJ': grpc.unary_unary_rpc_method_handler(
                    servicer.RunRLJ,
                    request_deserializer=pcc__pb2.RunRLJRequest.FromString,
                    response_serializer=pcc__pb2.RunRLJResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PccService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PccService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitPCC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PccService/InitPCC',
            pcc__pb2.InitRequest.SerializeToString,
            pcc__pb2.InitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunPcc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PccService/RunPcc',
            pcc__pb2.RunRequest.SerializeToString,
            pcc__pb2.RunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunSpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PccService/RunSpc',
            pcc__pb2.RunSpcRequest.SerializeToString,
            pcc__pb2.RunSpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunRLJ(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PccService/RunRLJ',
            pcc__pb2.RunRLJRequest.SerializeToString,
            pcc__pb2.RunRLJResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
